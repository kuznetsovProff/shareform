<!DOCTYPE html>
<html>

<head>
    <meta charset='utf-8'>
    <title>PIXI's Hello World</title>
    <script src='/js/jquery.min.js'></script>
    <script src='js/scaleToWindow.js'></script>
    <link rel='stylesheet' href='/css/null.css' />
</head>

<body style='background-color: #061639'>

    <script id="pixiscript" src='/js/pixi.min.js'></script>

    <script>
        // Вспомогательная функция для загрузки скриптов
        function loadScript(src) {
            return new Promise(function(resolve, reject) {
                let script = document.createElement('script');
                script.src = src;

                script.onload = () => resolve(script);
                script.onerror = () => reject(new Error(`Ошибка загрузки скрипта ${src}`));

                document.head.append(script);
            });
        }

        // Основные настройки
        let config = {
            width: 256, // default: 800
            height: 256, // default: 600
            antialias: true, // default: false
            transparent: false, // default: false
            resolution: 1 // default: 1
        };

        let app;
        let start = (config) => {
            try {
                app = new PIXI.Application(config);
                play(app);
            } catch (e) {
                $('#pixiscript').remove();
                loadScript('/js/pixi-legacy.js')
                    .then(
                        function(result) {
                            let config6 = {
                                width: 256, // default: 800
                                height: 256, // default: 600
                                antialias: true, // default: false
                                backgroundAlpha: 1,
                                resolution: 1 // default: 1
                            };
                            app = new PIXI.Application(config6);
                            play(app);
                        },
                        function(error) {

                        }
                    );
            }
        };

        // Запуск скрипта
        start(config);

        // Основная функция
        function play(app) {

            let loader = app.loader,
                resources = app.loader.resources,
                stage = app.stage,
                Container = PIXI.Container,
                Sprite = PIXI.Sprite;

            let win = window;
            let doc = document;

            doc.body.appendChild(app.view);

            let r = app.renderer;

            r.backgroundColor = 0x061639;

            r.view.style.position = "absolute";
            r.view.style.display = "block";
            r.autoResize = true;
            r.resize(win.innerWidth, win.innerHeight);

            const container = new Container();

            stage.addChild(container);

            let setup = () => {
                //Create the sprite
                let bee = new Sprite(resources["bee"].texture);

                //Add the sprite to the stage
                container.addChild(bee);

                bee.anchor.set(0.5, 0.5);


                container.addChild(bee);

                container.x = app.screen.width / 2;
                container.y = app.screen.height / 2;

                bee.x = container.width / 2;
                bee.y = container.height / 2;
                bee.scale.set(0.5, 0.5);

                container.pivot.x = container.width / 2 + bee.width / 2;
                container.pivot.y = container.height / 2 + bee.height / 2;

                app.ticker.add((delta) => {
                    // rotate the container!
                    // use delta to create frame-independent transform
                    container.rotation -= 0.01 * delta;
                    //radians

                    //radians = degrees*(Math.PI/180);
                    //degrees = radians*(180/Math.PI);
                });

            };
            loader
                .add("bunny", "images/bunny.png")
                .add("bee", "https://s3-us-west-2.amazonaws.com/s.cdpn.io/106114/bee.svg");
            loader
                .onProgress.add(loadProgressHandler);
            loader
                .load(setup);

            function loadProgressHandler(loader, resource) {
                // Display the file 'url' currently being loaded
                console.log('loading: ' + resource.url);
                // Display the percentage of files currently loaded
                console.log('progress: ' + loader.progress);
            };
            /*
SVG example
https://codepen.io/osublake/pen/oWzVvb

https://cdnjs.cloudflare.com/ajax/libs/gsap/1.19.1/TweenMax.min.js
https://cdnjs.cloudflare.com/ajax/libs/pixi.js/4.5.1/pixi.min.js
https://unpkg.com/pixi-particles@2.1.5
https://s3-us-west-2.amazonaws.com/s.cdpn.io/16327/MorphSVGPlugin.min.js?v=1


            */

            /*
                window.addEventListener('resize', event => {
                    scaleToWindow(renderer.view);
                });
            */
            $(window).on('resize', () => {
                scaleToWindow(renderer.view);
            });
            /*
                        doc.body.appendChild(app.view);

                        const container = new PIXI.Container();

                        app.stage.addChild(container);

                        // Create a new texture
                        const texture = PIXI.Texture.from('https://pixijs.io/examples/examples/assets/bunny.png');

                        // Create a 5x5 grid of bunnies
                        for (let i = 0; i < 25; i++) {
                            const bunny = new PIXI.Sprite(texture);
                            bunny.anchor.set(0.5);
                            bunny.x = (i % 5) * 40;
                            bunny.y = Math.floor(i / 5) * 40;
                            container.addChild(bunny);
                        }

                        // Move container to the center
                        container.x = app.screen.width / 2;
                        container.y = app.screen.height / 2;

                        // Center bunny sprite in local container coordinates
                        container.pivot.x = container.width / 2;
                        container.pivot.y = container.height / 2;

                        // Listen for animate update
                        app.ticker.add((delta) => {
                            // rotate the container!
                            // use delta to create frame-independent transform
                            container.rotation -= 0.01 * delta;
                        });
            */
        }
    </script>
</body>

</html>