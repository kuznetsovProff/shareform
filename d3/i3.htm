<!DOCTYPE html>
<html>

<head>
    <meta charset='utf-8'>
    <title>D3's Hello World</title>
    <script src='/js/d3.v6.min.js'></script>
    <link rel='stylesheet' href='/css/null.css' />
    <style>
        .axis path,
        .axis line {
            fill: none;
            stroke: #333;
        }
        
        .axis .grid-line {
            stroke: #000;
            stroke-opacity: 0.2;
        }
        
        .axis text {
            font: 10px Verdana;
        }
        
        .bar {
            /*stroke: none;*/
        }
        
        svg {
            position: absolute;
            top: 0;
            left: 0;
        }
    </style>
    <script src="data.js"></script>
</head>

<body style='background-color: #01040a'>
  
    
    <script>
        const win = window;
        
        win.onload = () => {
          try{
                let width = win.innerWidth - 0;
                let height = win.innerHeight - 7;
          
                //https://mdigi.tools/color-shades/#061639
          
                let margin = 0,
                    padding = 0;
          
                let svg = d3.select("body").append("svg")
                    .attr("class", "axis")
                    .attr("viewBox", "0 0 " + width + " " + height)
                    .attr("width", width)
                    .attr("height", height);
          
                win.onresize = () => {
                    svg.attr("width", win.innerWidth);
                    svg.attr("height", win.innerHeight);
                };
          
                // длина оси X= ширина контейнера svg - отступ слева и справа
                let xAxisLength = width - 2 * margin;
          
                // длина оси Y = высота контейнера svg - отступ сверху и снизу
                let yAxisLength = height - 2 * margin;
          
                // функция интерполяции значений на ось Х  
                let scaleXAxisFromData = (data) => {
                    return d3.scaleLinear()
                        .domain([1, data.length + 1])
                        .range([0, xAxisLength]);
                };
          
                let scaleX = scaleXAxisFromData(data);
                let scaleX2 = scaleXAxisFromData(data2);
                let scaleX3 = scaleXAxisFromData(data3);
                let scaleX4 = scaleXAxisFromData(data4);
                let scaleX5 = scaleXAxisFromData(data5);
          
                // функция интерполяции значений на ось Y
                let scaleY = d3.scaleLinear()
                    .domain([100, 0])
                    .range([0, yAxisLength]);
          
                let defs = svg.append("defs");
          
                function createBackgroundGradient(mainColor, gradientColor) {
          
                    let whiteGradient = defs.append("linearGradient")
                        .attr("id", "whiteGradient")
                        .attr("x1", "0%")
                        .attr("y1", "0%")
                        .attr("x2", "0%")
                        .attr("y2", "100%");
          
                    whiteGradient.append("stop")
                        .attr("offset", "0")
                        .attr("stop-color", gradientColor)
                        .attr("stop-opacity", "0.25");
          
                    whiteGradient.append("stop")
                        .attr("offset", "1")
                        .attr("stop-color", gradientColor)
                        .attr("stop-opacity", "1");
          
                    let gradientMask = defs.append("mask")
                        .attr("id", "gradientMask");
          
                    let rectMask = gradientMask.append("rect")
                        .attr("x", "0")
                        .attr("y", "0")
                        .attr("width", width)
                        .attr("height", height)
                        .attr("fill", "url(#whiteGradient)");
          
                    svg.append("rect")
                        .attr("x", "0")
                        .attr("y", "0")
                        .attr("width", width)
                        .attr("height", height)
                        .attr("fill", mainColor)
                        .attr("mask", "url(#gradientMask)");
                }
          
                createBackgroundGradient(colors[8], "white"); // "#061639"
          
                function createGradient(data) {
                    let Gradient = defs.append("linearGradient")
                        .attr("id", data.id)
                        .attr("x1", data.x1)
                        .attr("x2", data.x2)
                        .attr("y1", data.y1)
                        .attr("y2", data.y2);
          
                    d3.select('#' + data.id).selectAll("stop").data(data.stops).enter().append("stop");
                    d3.select('#' + data.id).selectAll('stop').data(data.stops).attr("offset", function(d) {
                        return d['offset'];
                    });
                    d3.select('#' + data.id).selectAll('stop').data(data.stops).attr("stop-color", function(d) {
                        return d['stop-color'];
                    });
                    d3.select('#' + data.id).selectAll('stop').data(data.stops).attr("stop-opacity", function(d) {
                        return d['stop-opacity'];
                    });
                    d3.select('#' + data.id).selectAll('stop').data(data.stops).exit().remove();
          
                    return Gradient;
                }
          
                createGradient(gradientData1);
                createGradient(gradientData2);
                createGradient(gradientData3);
                createGradient(gradientData4);
                createGradient(gradientData5);
          
                function createLayer(index, data, fill, stroke, scaleX, scaleY) {
                    let m = defs.append("mask")
                        .attr("id", "Mask" + index);
          
                    // создаем объект g для прямоугольников
                    let g = m.append("g")
                        .attr("class", "body")
                        .attr("transform", // сдвиг объекта вправо
                            "translate(" + margin + ", 0 )");
                    // связываем данные с прямоугольниками
          
                    g.selectAll("rect.bar")
                        .data(data)
                        .enter()
                        .append("rect")
                        .attr("class", "bar")
                        .attr("fill", fill)
                        .attr("stroke", stroke);
          
                    // устанавливаем параметры прямоугольников
                    g.selectAll("rect.bar")
                        .data(data)
                        .attr("x", function(d) {
                            return scaleX(d.x);
                        })
                        .attr("y", function(d) {
                            return scaleY(d.y) + margin;
                        })
                        .attr("height", function(d) {
                            return yAxisLength - scaleY(d.y);
                        })
                        .attr("width", function(d) {
          
                            return Math.floor(xAxisLength / data.length) - padding;
                        });
          
                    let r = svg.append("rect")
                        .attr("id", "Rect" + index)
                        .attr("x", "0")
                        .attr("y", "0")
                        .attr("width", width)
                        .attr("height", height)
                        //.attr("fill", "url(#Gradient" + index + ")")
                        .attr("fill", "url(#Gradient" + index + ")")
                        .attr("mask", "url(#Mask" + index + ")");
          
                }
          
                createLayer(1, data5, "#fff", "#fff", scaleX5, scaleY);
          
                createLayer(2, data4, "#fff", "#fff", scaleX4, scaleY);
          
                createLayer(3, data3, "#fff", "#fff", scaleX3, scaleY);
          
                createLayer(4, data2, "#fff", "#fff", scaleX2, scaleY);
          
                createLayer(5, data, "#fff", "#fff", scaleX, scaleY);
          } catch (e)     {
            alert(e);
          } 
        }
    </script>
</body>

</html>