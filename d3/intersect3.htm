<!DOCTYPE html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <title>Intersection 3</title>
    <script src='/js/d3.v6.min.js'></script>
    <script src='/js/chroma.min.js'></script>
    <script src='/js/lodash.min.js'></script>

    <!--<link rel='stylesheet' href='/css/null.css' />-->

    <link rel='stylesheet' href='/css/bootstrap4-toggle.min.css' />

    <!-- Bootstrap CSS CDN -->
    <link rel="stylesheet" href="/css/bootstrap.min.css" crossorigin="anonymous">
    <!-- Our Custom CSS -->
    <link rel="stylesheet" href="style3.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/css/jquery.mCustomScrollbar.css">

    <script src='/js/f4afbaa213.js' crossorigin='anonymous'></script>

    <script src="/js/jquery.min.js" crossorigin="anonymous"></script>

    <script src="/js/popper.min.js" crossorigin="anonymous"></script>

    <script src="/js/bootstrap.min.js" crossorigin="anonymous"></script>

    <script src="/js/jquery.mCustomScrollbar.concat.min.js"></script>
    <script src='/js/bootstrap4-toggle.min.js'></script>
    <script src='./js/intersection.js'></script>
    <script src='./js/geometry.js'></script>
    <script src='./js/path.js'></script>
    <style>
        svg {
            outline: 1px solid gray;
            display: block;
            /*margin: 1em auto;*/
        }
        
        .drag {
            fill: rgba(100, 100, 100, 0.2);
            stroke: black;
            stroke-width: 1;
            cursor: pointer;
            z-index: -100;
        }
        
        .group {
            z-index: 100;
        }
        
        .dot {}
    </style>
</head>

<body>

    <svg id="tt"></svg>

    <script>
        //
        //
        //
        let svg = d3.select("#tt").attr("width", window.innerWidth).attr("height", window.innerHeight);
        //let d1Text = svg.append("text").attr("x", "0").attr("y", "10");
        //let d2Text = svg.append("text").attr("x", "0").attr("y", "20");
        let g = svg.append('g')
            .attr('cursor', 'grab');
        let gdots = svg.append('g').attr("id", "dots");

        var c = {
            a: {
                id: 'a',
                x: 150,
                y: 150,
                r: 35
            },
            b: {
                id: 'b',
                x: 273,
                y: 84,
                r: 55
            },
            c: {
                id: 'c',
                x: 300,
                y: 100,
                r: 45
            },
            d: {
                id: 'd',
                x: 250,
                y: 50,
                r: 45
            },
            e: {
                id: 'e',
                x: 75,
                y: 80,
                r: 55
            },
            f: {
                id: 'f',
                x: 135,
                y: 115,
                r: 45
            },
            getArr: function() {
                return [this.a, this.b, this.c, this.d, this.e, this.f];
                //return [this.a, this.b, this.c];
            }
        };

        let arr = c.getArr();

        g.selectAll(".drag")
            .data(arr)
            .enter()
            .append("circle")
            .attr("class", "drag")
            .style("z-index", "100")
            .attr("id", d => d.id)
            .attr("r", d => d.r)
            .attr("cx", d => d.x)
            .attr("cy", d => d.y)
            .call(d3.drag()
                .on('start', dragstarted)
                .on('drag', dragged)
                .on('end', dragended));

        function dragstarted(id) {
            d3.select(this).raise();
            g.attr('cursor', 'grabbing');
        }

        function dragged(event, d) {
            let dd = [];

            d3.select(this)
                .attr('cx', d.x = event.x)
                .attr('cy', d.y = event.y);

            arr.forEach((i) => {
                if (i.id == d.id) {
                    i.x = d.x;
                    i.y = d.y;
                };

            });

            function returnd(n) {
                return describeArcIntersection(n);
            };

            dd = findAllIntersections(arr);
            let groups = gdots
                .selectAll(".group")
                .data(dd);

            groups.selectAll(".pie").remove();

            let groupsenter = groups.enter()
                .append("g")
                .attr("class", "group");

            let paths = groups.selectAll(".pie")
                .attr("d", returnd);

            groups.append("path")
                .attr("d", returnd)
                .attr("class", "pie")
                .style("stroke-width", "1px")
                .style("fill", "red")
                .style("fill-opacity", "0.1")
                .style("stroke", "red").style("z-index", "1");

            let dots = groups.selectAll(".dot").data(function(d) {
                    return d.dots;
                }).attr("cx", n => n.x)
                .attr("cy", n => n.y)
                .attr("r", n => n.r)
                .style("fill", "red");

            let dotsenter = dots.enter()
                .append("circle")
                .attr("class", "dot")
                .attr("r", n => n.r)
                .attr("cx", n => n.x)
                .attr("cy", n => n.y)
                .style("fill", "red");

            dots
                .exit()
                .remove();

            paths.exit().remove();

            groups
                .exit()
                .remove();

        }

        function dragended() {
            g.attr('cursor', 'grab');
        }

        dd = findAllIntersections(arr);

        // 2
        let groups = gdots
            .selectAll(".group")
            .data(dd);

        let groupsenter = groups.enter()
            .append("g")
            .attr("class", "group");
        groupsenter.append("path")
            .attr("d", returnd)
            .attr("class", "pie")
            .style("stroke-width", "1px")
            .style("fill", "red")
            .style("fill-opacity", "0.1")
            .style("stroke", "red").style("z-index", "1");

        function returnd(n) {
            return describeArcIntersection(n);
        };

        let dots = groupsenter.selectAll(".dot")
            .data(function(d) {
                return d.dots;
            });

        let dotsenter = dots.enter()
            .append("circle")
            .attr("class", "dot")
            .attr("r", n => n.r)
            .attr("cx", n => n.x)
            .attr("cy", n => n.y)
            .style("fill", "red");

        dots
            .exit()
            .remove();

        groups
            .exit()
            .remove();
    </script>
</body>